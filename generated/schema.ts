// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get info_orderId(): BigInt {
    let value = this.get("info_orderId");
    return value!.toBigInt();
  }

  set info_orderId(value: BigInt) {
    this.set("info_orderId", Value.fromBigInt(value));
  }

  get info_packageId(): BigInt {
    let value = this.get("info_packageId");
    return value!.toBigInt();
  }

  set info_packageId(value: BigInt) {
    this.set("info_packageId", Value.fromBigInt(value));
  }

  get info_period(): BigInt {
    let value = this.get("info_period");
    return value!.toBigInt();
  }

  set info_period(value: BigInt) {
    this.set("info_period", Value.fromBigInt(value));
  }

  get info_amount(): BigInt {
    let value = this.get("info_amount");
    return value!.toBigInt();
  }

  set info_amount(value: BigInt) {
    this.set("info_amount", Value.fromBigInt(value));
  }

  get info_amountClaimed(): BigInt {
    let value = this.get("info_amountClaimed");
    return value!.toBigInt();
  }

  set info_amountClaimed(value: BigInt) {
    this.set("info_amountClaimed", Value.fromBigInt(value));
  }

  get info_timeStart(): BigInt {
    let value = this.get("info_timeStart");
    return value!.toBigInt();
  }

  set info_timeStart(value: BigInt) {
    this.set("info_timeStart", Value.fromBigInt(value));
  }

  get info_timeClaim(): BigInt {
    let value = this.get("info_timeClaim");
    return value!.toBigInt();
  }

  set info_timeClaim(value: BigInt) {
    this.set("info_timeClaim", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class Claim extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Claim must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Claim", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get info_orderId(): BigInt {
    let value = this.get("info_orderId");
    return value!.toBigInt();
  }

  set info_orderId(value: BigInt) {
    this.set("info_orderId", Value.fromBigInt(value));
  }

  get info_packageId(): BigInt {
    let value = this.get("info_packageId");
    return value!.toBigInt();
  }

  set info_packageId(value: BigInt) {
    this.set("info_packageId", Value.fromBigInt(value));
  }

  get info_period(): BigInt {
    let value = this.get("info_period");
    return value!.toBigInt();
  }

  set info_period(value: BigInt) {
    this.set("info_period", Value.fromBigInt(value));
  }

  get info_amount(): BigInt {
    let value = this.get("info_amount");
    return value!.toBigInt();
  }

  set info_amount(value: BigInt) {
    this.set("info_amount", Value.fromBigInt(value));
  }

  get info_amountClaimed(): BigInt {
    let value = this.get("info_amountClaimed");
    return value!.toBigInt();
  }

  set info_amountClaimed(value: BigInt) {
    this.set("info_amountClaimed", Value.fromBigInt(value));
  }

  get info_timeStart(): BigInt {
    let value = this.get("info_timeStart");
    return value!.toBigInt();
  }

  set info_timeStart(value: BigInt) {
    this.set("info_timeStart", Value.fromBigInt(value));
  }

  get info_timeClaim(): BigInt {
    let value = this.get("info_timeClaim");
    return value!.toBigInt();
  }

  set info_timeClaim(value: BigInt) {
    this.set("info_timeClaim", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get info_orderId(): BigInt {
    let value = this.get("info_orderId");
    return value!.toBigInt();
  }

  set info_orderId(value: BigInt) {
    this.set("info_orderId", Value.fromBigInt(value));
  }

  get info_packageId(): BigInt {
    let value = this.get("info_packageId");
    return value!.toBigInt();
  }

  set info_packageId(value: BigInt) {
    this.set("info_packageId", Value.fromBigInt(value));
  }

  get info_period(): BigInt {
    let value = this.get("info_period");
    return value!.toBigInt();
  }

  set info_period(value: BigInt) {
    this.set("info_period", Value.fromBigInt(value));
  }

  get info_amount(): BigInt {
    let value = this.get("info_amount");
    return value!.toBigInt();
  }

  set info_amount(value: BigInt) {
    this.set("info_amount", Value.fromBigInt(value));
  }

  get info_amountClaimed(): BigInt {
    let value = this.get("info_amountClaimed");
    return value!.toBigInt();
  }

  set info_amountClaimed(value: BigInt) {
    this.set("info_amountClaimed", Value.fromBigInt(value));
  }

  get info_timeStart(): BigInt {
    let value = this.get("info_timeStart");
    return value!.toBigInt();
  }

  set info_timeStart(value: BigInt) {
    this.set("info_timeStart", Value.fromBigInt(value));
  }

  get info_timeClaim(): BigInt {
    let value = this.get("info_timeClaim");
    return value!.toBigInt();
  }

  set info_timeClaim(value: BigInt) {
    this.set("info_timeClaim", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Initialized extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Initialized entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Initialized must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Initialized", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Initialized | null {
    return changetype<Initialized | null>(
      store.get("Initialized", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get version(): i32 {
    let value = this.get("version");
    return value!.toI32();
  }

  set version(value: i32) {
    this.set("version", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Paused extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Paused entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Paused must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Paused", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Paused | null {
    return changetype<Paused | null>(store.get("Paused", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Unpaused extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unpaused entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Unpaused must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Unpaused", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Unpaused | null {
    return changetype<Unpaused | null>(store.get("Unpaused", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Withdraw must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdraw", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get info_orderId(): BigInt {
    let value = this.get("info_orderId");
    return value!.toBigInt();
  }

  set info_orderId(value: BigInt) {
    this.set("info_orderId", Value.fromBigInt(value));
  }

  get info_packageId(): BigInt {
    let value = this.get("info_packageId");
    return value!.toBigInt();
  }

  set info_packageId(value: BigInt) {
    this.set("info_packageId", Value.fromBigInt(value));
  }

  get info_period(): BigInt {
    let value = this.get("info_period");
    return value!.toBigInt();
  }

  set info_period(value: BigInt) {
    this.set("info_period", Value.fromBigInt(value));
  }

  get info_amount(): BigInt {
    let value = this.get("info_amount");
    return value!.toBigInt();
  }

  set info_amount(value: BigInt) {
    this.set("info_amount", Value.fromBigInt(value));
  }

  get info_amountClaimed(): BigInt {
    let value = this.get("info_amountClaimed");
    return value!.toBigInt();
  }

  set info_amountClaimed(value: BigInt) {
    this.set("info_amountClaimed", Value.fromBigInt(value));
  }

  get info_timeStart(): BigInt {
    let value = this.get("info_timeStart");
    return value!.toBigInt();
  }

  set info_timeStart(value: BigInt) {
    this.set("info_timeStart", Value.fromBigInt(value));
  }

  get info_timeClaim(): BigInt {
    let value = this.get("info_timeClaim");
    return value!.toBigInt();
  }

  set info_timeClaim(value: BigInt) {
    this.set("info_timeClaim", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
